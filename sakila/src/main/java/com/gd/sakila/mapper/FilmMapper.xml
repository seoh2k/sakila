<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper"> 
	
	<select id="selectFilmList" parameterType="com.gd.sakila.vo.Page" resultType="com.gd.sakila.vo.FilmList">
		SELECT 
			f.film_id filmId, 
			f.title title, 
			c.name categoryName,
			f.description description, 
			f.release_year releaseYear,
			f.language_id languageId,
			f.rental_duration rentalDuration,
			f.rental_rate rentalRate,
			f.length LENGTH,
			f.replacement_cost replacementCost, 
			f.rating rating,
			f.special_features specialFeatures,
			f.last_update lastUpdate,
			GROUP_CONCAT(CONCAT(a.first_name, _utf8mb4' ', a.last_name) SEPARATOR ', ') AS actors
		FROM film f
		LEFT JOIN film_category fc ON f.film_id = fc.film_id
		LEFT JOIN category c ON fc.category_id = c.category_id
		LEFT OUTER JOIN film_actor fa ON f.film_id = fa.film_id
		LEFT OUTER JOIN actor a ON fa.actor_id = a.actor_id
		GROUP BY f.film_id
		<where>
			<if test="searchWord != null">
				title LIKE CONCAT('%', #{searchWord},'%') OR actors LiKE CONCAT('%', #{searchWord}, '%')
			</if>
		</where>
		ORDER BY filmId ASC
		LIMIT #{beginRow}, #{rowPerPage} 
	</select>
	
	<select id="selectFilmTotal" parameterType="String" resultType="Integer">
		SELECT COUNT(*) FROM nicer_but_slower_film_list
		<where>
			<if test="searchWord != null">
				title LIKE CONCAT('%', #{searchWord}, '%')
			</if>
		</where>
	</select>
	
	<!-- Map: filmId(in), storeId(in), filmCount(out) -->
	<select id="selectFilmInStock" 
		parameterType="java.util.Map"
		resultType="int"
		statementType="CALLABLE">
		{
			call film_in_stock(
				#{filmId},
				#{storeId},
				#{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=Integer}
			)
		}
	</select>

</mapper>